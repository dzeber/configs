"==========================================================================
"
" My custom Vim settings
"
"==========================================================================


" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible


" Enable Vundle for plugin management.
" Turn of filetype detection (required).
filetype off
" Set the runtime path to include Vundle and initialize.
set rtp+=~/vimfiles/bundle/Vundle.vim
" Pass the path where Vundle should install plugins
call vundle#begin('~/vimfiles/bundle/')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
"Plugin 'bling/vim-airline'
call vundle#end()
filetype plugin indent on


"==========================================================================
"
" Visual/theme settings:
"

set guifont=Consolas:h11
color desert
"color abra
" (Good color schemes: darkblue, desert, slate)
" Make comments italic
highlight Comment gui=italic

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
let &guioptions = substitute(&guioptions, "t", "", "g")

" Keep cursor a few lines away from edges
set scrolloff=3

" Show the cursor position all the time
set ruler

" Show line numbers
set number

" Indent new line same as previous
set autoindent

" Highlight current line
set cursorline

"Show matching parens/brackets
set showmatch

" Highlight column 80
set colorcolumn=80


"==========================================================================
"
" Key mappings
"

" Use the default mapleader
let mapleader = '\'

" <Enter> to enter insert mode after cursor
"nnoremap <CR> a

" <Ctrl-Space> to autocomplete from words in file
inoremap <C-Space> <C-x><C-n>

" <Shift-Enter> to return to normal mode
inoremap <S-CR> <Esc>

" System copy/paste shortcuts
vmap <Leader>y "+y
nmap <Leader>p "+p
nmap <Leader>P "+P

" TODO: scroll U/D a single line.

"==========================================================================
"
" Editing settings
"

" Encoding
set encoding=utf-8

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Tabbing: always replace with 4 spaces
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab

" Command autocompletion:
set wildmode=longest:full
set wildmenu

" Insert autocompletion:
set completeopt=longest,menu

" Keep backup file
"if has("vms")
"  set nobackup
"else
"  set backup
"endif

" Hide rather than closing buffers
set hidden

" Switch to window if buffer already open
set switchbuf=useopen

" Open splits below and to the right
set splitbelow
set splitright

" No backup files.
set nobackup
set nowritebackup
set noswapfile

" Keep 50 lines of command line history
set history=50

" Display incomplete commands
set showcmd

" Do incremental searching
set incsearch

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" Maximize if using GUI
if has("gui_running")
    au GUIEnter * simalt ~x
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!
  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
  augroup END
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif


set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


"==========================================================================
"
" Load previous session if available
"

" Set info to save with session
"set sessionoptions=blank,buffers,curdir,folds,options,resize,tabpages
"set sessionoptions+=winpos,winsize
 
" Default session file.
" TODO: when sourcing the session in the vimrc, the status line changes to
" somthing weird, and relative window sizing is screwed up
"let defaultsession = expand("~/vimfiles/sessions/currentsession.vim")
"if filereadable(defaultsession)
 "   silent execute "source" defaultsession
"endif

" TODO: save session on exit (using VimLeave?)

