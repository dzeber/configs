"==========================================================================
"
" My custom Vim settings
"
"==========================================================================


" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Check environment.
let s:on_windows = has("win32") || has("win32unix") || has("win64")
let s:on_mac = has("mac") || has("macunix")

" Current theme settings - see below
let s:current_font_win = "consolas"
let s:current_font_mac = "source"
let s:current_theme_dark = "parsec"
let s:current_theme_light = "solarized"
let s:current_theme_term = "wombat256mod"
let s:current_theme_win = "seoul256"
" Whether or not to use the dark theme in GUI.
let s:use_darktheme = 0

" Identify the vim user config dir.
let s:vimdir = split(&rtp, ",")[0]

" Load plugins using Vundle for plugin management, if available.
" First determine the path to Vundle.
let s:plugin_path = s:vimdir . "/bundle"
let s:Vundle_path = s:plugin_path . "/Vundle.vim"
if isdirectory(s:Vundle_path)
    " Turn off filetype detection (required).
    filetype off
    " Set the runtime path to include Vundle and initialize.
    let &rtp .= "," . s:Vundle_path
    call vundle#begin(s:plugin_path)

    " Let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    "------------------------------
    " Functionality
    "------------------------------

    " Fuzzy finder.
    Plugin 'ctrlpvim/ctrlp.vim'

    " Plugin to stop accidentally quitting windows.
    "Plugin 'Carpetsmoker/confirm_quit.vim'

    "------------------------------
    " Theming and visual elements
    "------------------------------

    " Extensive selection of color schemes.
    Plugin 'flazz/vim-colorschemes'

    " Show mark locations on left of window.
    Plugin 'kshenoy/vim-signature'

    " Distraction-free mode.
    Plugin 'junegunn/goyo.vim'

    " Dim other than current sections.
    Plugin 'junegunn/limelight.vim'

    "------------------------------
    " Motions, objects & operators
    "------------------------------

    " Use 's' as a text object for delimiters, 'ss' for linewise
    Plugin 'tpope/vim-surround'

    " Allow plugins to work with '.'
    Plugin 'tpope/vim-repeat'

    " Use 'gc' as an operator to toggle comments, 'gcc' linewise
    Plugin 'tpope/vim-commentary'

    " Use custom text objects
    Plugin 'kana/vim-textobj-user'

    " Use 'au'/'iu' as a text object for URLs
    Plugin 'jceb/vim-textobj-uri'

    " Use 'av'/'iv' as a text object for words within camelCase/snake_case
    Plugin 'Julian/vim-textobj-variable-segment'

    " Use 'ai'/'ii' as a text object for indented blocks,
    " 'aI' for lines above and below.
    Plugin 'michaeljsmith/vim-indent-object'

    " Fix deleting and pasting over text
    " Use 'gr' to replace a motion or selection with a given register contents
    Plugin 'vim-scripts/ReplaceWithRegister'

    "------------------------------
    " File formats
    "------------------------------

    " Pandoc
    Plugin 'vim-pandoc/vim-pandoc'
    Plugin 'vim-pandoc/vim-pandoc-syntax'

    " RMarkdown
    Plugin 'vim-pandoc/vim-rmarkdown'

    " Tabular formatting
    Plugin 'godlygeek/tabular'

    " Markdown-specific functionality
    "Plugin 'plasticboy/vim-markdown'

    " Tmux
    Plugin 'tmux-plugins/vim-tmux'

    call vundle#end()
    filetype plugin indent on
endif

" Path for current session file.
let s:current_session_path = s:vimdir . "/sessions/current.vim"


"==========================================================================
"
" Editing settings
"

" Encoding
set encoding=utf-8

" Automatically load external changes
set autoread

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Make `~` behave like an operator
"set tildeop

" Tabbing: always replace with 4 spaces
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab

" Hard wrap lines at 80 characters.
set textwidth=80

" Remove comment leader when joining lines
set formatoptions+=j

" Don't insert an extra space after '.' when joining lines.
set nojoinspaces

" Comment formatting:
" Make '*' a first-line comment leader by default, eg. for Markdown lists.
" C-style middle comment leader still gets added after a starting leader.
set comments^=fb:*

" " Remove 'XCOMM' leader.
" set comments-=:XCOMM
" " Add comment leaders for VimScript, SQL.
" " Place at beginning of options string to avoid overriding single '-'.
" set comments^=nb:\",b:--
" " Don't repeat '>' leader on subsequent lines.
" set comments-=n:>
" set comments+=fnb:>
" " Add Markdown bullets.
" set comments+=fb:*,fb:+
" " Recognize multiple '#' and '%' as comment leaders.
" set comments-=b:#,:%
" set comments+=nb:#,nb:%

" Command autocompletion:
set wildmode=longest:full
set wildmenu

" Insert autocompletion:
set completeopt=longest,menu

" Keep backup file
"if has("vms")
"  set nobackup
"else
"  set backup
"endif

" Change working dir to containing dir of file in window
set autochdir

" Hide rather than closing buffers
set hidden

" Switch to window if buffer already open
set switchbuf=useopen

" Open splits below and to the right
set splitbelow
set splitright

" Don't automatically equalize window splits
set noequalalways

" No backup files.
set nobackup
set nowritebackup
set noswapfile

" Require confirmation for closing unsaved file
set confirm

" Keep 50 lines of command line history
set history=50

" Display incomplete commands
set showcmd

" Do incremental searching
set incsearch
" Use smart case sensitivity for searching:
" case-sensitive only if search term includes an uppercase letter
set ignorecase smartcase

" augroup inscompletion
"     autocmd!
"     autocmd MenuPopup i set noignorecase
"     autocmd CompleteDone * set ignorecase
" augroup END

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event
  " handler (happens when dropping a file on gvim). 
  " Also don't do it when the mark is in the first line:
  " that is the default position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   execute "normal! g`\"" |
    \ endif
augroup END


"==========================================================================
"
" Mappings
"

" Use a custom mapleader
let mapleader = " "
" Set maplocalleader for use with vim-pandoc shortcuts
let maplocalleader = "\\"

" <Ctrl-Space> to autocomplete from words in file
inoremap <C-Space> <C-x><C-n>

" <Shift-Enter> to return to normal mode
noremap <S-CR> <Esc>

" Remove mapping to avoid unintentionally closing windows
nmap <C-W>o <Nop>

" System copy/paste shortcuts
vnoremap <Leader>y "+y
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
"inoremap <Leader>p <Esc>"+pa
"inoremap <Leader>P "+P

" Add new lines without staying in Insert mode
nnoremap <Leader>o o<Esc>
nnoremap <Leader>O O<Esc>

" Toggle relative line numbers
nnoremap <Leader>l :set relativenumber!<CR>

" Toggle goyo (distraction-free mode)
nnoremap <Leader>g :Goyo<CR>

" Section movement in Markdown (with vim-pandoc):
" Jump to parent header (can use '[[' to jump to current header)
nnoremap [p :call pandoc#keyboard#sections#CurrentHeaderParent()<CR>
" Move between sibling headers
nnoremap <Leader>]] :call pandoc#keyboard#sections#NextSiblingHeader()<CR>
nnoremap <Leader>[[ :call pandoc#keyboard#sections#PrevSiblingHeader()<CR>

" Markdown section header underlines
nnoremap <Leader>d :s/^#*\s*//<CR>yyp:s/./-/g<CR>
nnoremap <Leader>D :s/^#*\s*//<CR>yyp:s/./=/g<CR>

" Shortcut for R
inoremap <C-_> <lt>-
" TODO: scroll U/D a single line.

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
"inoremap <C-U> <C-G>u<C-U>

" Remap the `W` command to `w` to fix a common typo
command! W w

" Render RMarkdown
command! Rmd ! Rscript --vanilla -e 'rmarkdown::render("%")'

" Render Github-flavoured Markdown using Pandoc
command! PdG ! pandoc % -s -f markdown_github -t html -o %:r.html --toc

" Colour scheme switching

" Save the current session
execute "command! Svs mksession!" s:current_session_path
" Load the last saved session
execute "command! Lds source" s:current_session_path


"==========================================================================
"
" Visual/theme settings:
"

" Keep cursor a few lines away from edges
set scrolloff=3
" Show the cursor position all the time
set ruler
" Show line numbers
set number
" Indent new line same as previous
set autoindent
" Highlight current line
set cursorline
"Show matching parens/brackets
set showmatch
" Highlight column 80
set colorcolumn=80
" Always show the status line
set laststatus=2

" Wrap long lines
set wrap
" Don't break in the middle of words
set linebreak
" Set indicator for wrapped lines
set showbreak=--->


"------------------------------
"
" Set up functions to set favourite fonts and colorschemes
"

let s:has_colours = &t_Co > 2 || has("gui")

if has("gui")
    let s:favourite_fonts = {
        \"consolas": "Consolas:h11",
        \"osaka": "Osaka-Mono:h16",
        \"source": "SourceCodePro-Regular:h14",
        \"monaco": "Monaco:h13",
        \"inconsolata": "Inconsolata:h15",
        \"writing": "AnonymousPro:h15",
    \}

    function! ListFavouriteFonts()
        for [l:k, l:v] in items(s:favourite_fonts)
            echo l:k . " :  " l:v
        endfor
    endfunction

    " Display the font list
    command! FavouriteFonts :call ListFavouriteFonts()

    " Set the `guifont` option to the arg value.
    " Try looking up the arg as a key in the favourite font dict.
    " If not found, try using it directly as a font name.
    function! SetFont(fontkey)
        if has_key(s:favourite_fonts, a:fontkey)
            let l:font = s:favourite_fonts[a:fontkey]
        else
            " If the given value is not a key in the font dict,
            " try using it as a font name directly.
            let l:font = a:fontkey
        endif
        " Use 'set' so as to throw an error if the font is invalid.
        " Using 'let' was failing silently.
        execute "set guifont=" . l:font
    endfunction

    " Switch fonts from a list of favourites identified by keyword.
    command!
        \ -complete=customlist,s:ListFontKeys
        \ -nargs=1
        \ SetFont
        \ :call SetFont(<q-args>)

    " Use font keys as the completion suggestions
    function! s:ListFontKeys(A, L, P)
        return keys(s:favourite_fonts)
    endfunction
endif

" Set current font.
if has("gui_running")
    if s:on_windows
        call SetFont(s:current_font_win)
    elseif s:on_mac
        call SetFont(s:current_font_mac)
    endif
endif


if s:has_colours
    let s:favourite_dark_themes = [
        \"wombat256mod",
        \"desert",
        \"kalisi",
        \"flatlandia",
        \"parsec"
    \]

    let s:favourite_light_themes = [
        \"solarized",
        \"lucius",
    \]

    function! ListFavouriteDarkThemes()
        for l:t in s:favourite_dark_themes
            echo l:t
        endfor
    endfunction

    function! ListFavouriteLightThemes()
        for l:t in s:favourite_light_themes
            echo l:t
        endfor
    endfunction

    command! FavouriteDarkThemes :call ListFavouriteDarkThemes()
    command! FavouriteLightThemes :call ListFavouriteLightThemes()

    " Set light or dark colour schemes.
    " Explicitly set `background` value.
    function! SetDarkTheme(colorscheme)
        set background=dark
        execute "colorscheme " . a:colorscheme
    endfunction

    function! SetLightTheme(colorscheme)
        set background=light
        execute "colorscheme " . a:colorscheme
    endfunction

    command!
        \ -complete=color
        \ -nargs=1
        \ SetDarkTheme
        \ :call SetDarkTheme(<q-args>)
    command!
        \ -complete=color
        \ -nargs=1
        \ SetLightTheme
        \ :call SetLightTheme(<q-args>)

    " Set current color scheme.
    if has("gui")
        if s:on_windows
            call SetDarkTheme(s:current_theme_win)
        elseif s:use_darktheme
            call SetDarkTheme(s:current_theme_dark)
        else
            call SetLightTheme(s:current_theme_light)
        endif
    else
        call SetDarkTheme(s:current_theme_term)
    end

    " Switch syntax highlighting on
    syntax on

    " Don't let MacVim reset the colorscheme.
    if s:on_mac
        let macvim_skip_colorscheme=1
    endif
endif


" Make comments italic
highlight Comment gui=italic

" Clean up the appearance of the sign column.
" For now, drop background colors and make the marks bold.
" TODO: match the current color scheme.
highlight SignColumn guibg=NONE ctermbg=NONE
highlight SignatureMarkText term=bold cterm=bold gui=bold
highlight SignatureMarkText ctermbg=NONE guibg=NONE

" Maximize if using GUI
"if has("gui_running")
 "   au GUIEnter * simalt ~x
"endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has("mouse")
  set mouse=a
endif

" Windows settings.
if s:on_windows
    " For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
    let &guioptions = substitute(&guioptions, "t", "", "g")
endif


"==========================================================================
"
" Other
"

" Plaintext mode
" --------------

" Adjust some settings for more standard plaintext editing
function! SetWriting()
    setlocal noexpandtab
    setlocal textwidth=0
    setlocal nonumber
    setlocal showbreak=
    "call SetFont("writing")
endfunction

function! SetNoWriting()
    setlocal expandtab
    setlocal textwidth=80
    setlocal number
    setlocal showbreak=--->
    "call SetFont("source")
endfunction

command SetWriting :call SetWriting()
command SetNoWriting :call SetNoWriting()


" Open online help
" ----------------

" Usage is the same as for the `help` command.
" Opens the relevant help page from `vimhelp.org`.
function! OnlineVimHelp(...)
    let l:helpurl = "https://vimhelp.org/"
    if a:0
        " A subject arg was passed.
        " Figure out which help file and tag would match.
        try
            " Open help on this topic.
            " If no match is found, the error will be reported and
            " the function will abort.
            execute "help " . a:1
        endtry
        " Figure out which help file was opened.
        let l:helpfile = expand("%")
        " See if help was opened at a specific tag.
        let l:tagitems = gettagstack()["items"]
        let l:tagname = ""
        if len(l:tagitems)
            let l:tagname = l:tagitems[0]["tagname"]
            let l:tagname = split(l:tagname, "@")[0]
        endif
        execute "helpclose"
        " Open online help for this subject.
        " Jump to the tag if available.
        let l:helpurl .= l:helpfile . ".html"
        if len(l:tagname)
            let l:helpurl .= fnameescape("#" . l:tagname)
        endif
    endif
    execute "silent !open " . l:helpurl
endfunction

" Open HTML help
command! -complete=help -nargs=? Help :call OnlineVimHelp(<f-args>)
command! -complete=help -nargs=? H :call OnlineVimHelp(<f-args>)


" Window resizing
" ---------------

" Get the available height in Vim window lines for the current GUI window.
function! GetWinHeightLines()
    let l:winh = 0
    " Iterate over windows in the current tab and add up window heights
    " for all leftmost windows.
    for l:winnum in range(1, winnr("$"))
        if win_screenpos(l:winnum)[1] == 1
            let l:winh += winheight(l:winnum)
        endif
    endfor
    return l:winh
endfunction

" Compute the number of lines of height represented by the given proportion.
" If an integer is given, it is interpreted the decimal part of the proportion
" eg. `9` is interpreted as 0.9.
function! NumLinesForProp(prop)
    let l:prop = a:prop
    if l:prop !~ "\\."
        " No decimal point. Interpret int as the fractional part.
        let l:prop = "0." . l:prop
    elseif l:prop =~ "^\\."
        " Starts with a decimal point. Add an initial 0.
        let l:prop = "0" . l:prop
    endif
    return str2float(l:prop) * GetWinHeightLines()
endfunction


" Resize window to a proportion of the available height.
command!
    \ -nargs=1
    \ Wr
    \ :execute "resize " . string(NumLinesForProp(<f-args>))


" Automatic session management
" ----------------------------

" Set info to save with session
"set sessionoptions=blank,buffers,curdir,folds,options,resize,tabpages
"set sessionoptions+=winpos,winsize

" Default session file.
" TODO: when sourcing the session in the vimrc, the status line changes to
" somthing weird, and relative window sizing is screwed up
"let defaultsession = expand("~/vimfiles/sessions/currentsession.vim")
"if filereadable(defaultsession)
 "   silent execute "source" defaultsession
"endif

" TODO: save session on exit (using VimLeave?)


" Diff command
" ------------

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
"if !exists(":DiffOrig")
"  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
"		  \ | wincmd p | diffthis
"endif

"set diffexpr=MyDiff()
"function MyDiff()
"  let opt = '-a --binary '
"  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
"  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
"  let arg1 = v:fname_in
"  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
"  let arg2 = v:fname_new
"  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
"  let arg3 = v:fname_out
"  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
"  let eq = ''
"  if $VIMRUNTIME =~ ' '
"    if &sh =~ '\<cmd'
"      let cmd = '""' . $VIMRUNTIME . '\diff"'
"      let eq = '"'
"    else
"      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
"    endif
"  else
"    let cmd = $VIMRUNTIME . '\diff'
"  endif
"  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
"endfunction
"


"==========================================================================
"
" Plugin settings
"

" ctrlp
" -----

" Set the key mapping.
let g:ctrlp_map = "<C-P>"

" Start in buffer search mode
let g:ctrlp_cmd = "CtrlPBuffer"

" Search by filename by default
let g:ctrlp_by_filename = 1

" Use regexp search by default
let g:ctrlp_regexp = 1

" Larger search window
let g:ctrlp_match_window = "order:ttb,max:30"

" Jump to any window if already open.
" This setting appears to be broken currently.
" To jump, press <Enter> for windows in the same tab
" or <Ctrl-T> for buffers in a different tab.
let g:ctrlp_switch_buffer = "et"

" Start file searches from current working dir
let g:ctrlp_working_path_mode = "c"

" Include hidden files
let g:ctrlp_show_hidden = 1

" Follow symlinks
let g:ctrlp_follow_symlinks = 1


" confirm_quit
" ------------

" Don't create the default mappings.
" let g:confirm_quit_nomap = 1

" " Set the 'quit' commands to always ask for confirmation.
" cnoremap <silent> q<CR>  :call confirm_quit#confirm(0, "always")<CR>
" cnoremap <silent> wq<CR> :call confirm_quit#confirm(1, "always")<CR>
" cnoremap <silent> x<CR>  :call confirm_quit#confirm(1, "always")<CR>
" nnoremap <silent> ZZ     :call confirm_quit#confirm(1, "always")<CR>


" " vim-markdown
" " ------------

" " Enable additional syntax highlighting
" let g:vim_markdown_math = 1
" let g:vim_markdown_frontmatter = 1
" let g:vim_markdown_strikethrough = 1

" " Open links using 'ge' for Markdown files without the '.md' extension
" let g:vim_markdown_no_extensions_in_markdown = 1

" " Automatically save when following a link
" let g:vim_markdown_autowrite = 1

" " Don't automatically insert bullets or indent list items
" let g:vim_markdown_auto_insert_bullets = 0
" let g:vim_markdown_new_list_item_indent = 0

" " Open linked files in new horizontal split
" let g:vim_markdown_edit_url_in = 'hsplit'

" " Disable folding in Markdown (seems to be buggy?)
" let g:vim_markdown_folding_disabled = 1


" vim-pandoc
" ----------

" Disable some modules
let g:pandoc#modules#disabled = [
    \"folding",
    \"formatting",
    \"menu",
    \"spell",
    \"hypertext",
\]
"\"keyboard",

" Keep the keyboard shortcuts, but disable some types of mappings
let g:pandoc#keyboard#blacklist_submodule_mappings = [
    \"lists",
    \"styles",
\]


" vim-pandoc-syntax
" -----------------

" Allow very limited concealing: bold/italic, escaped dollar signs
let g:pandoc#syntax#conceal#use = 1
let g:pandoc#syntax#conceal#blacklist = [
    \"titleblock ",
    \"image",
    \"subscript",
    \"superscript",
    \"strikeout",
    \"atx",
    \"codeblock_start",
    \"codeblock_delim",
    \"footnote",
    \"definition",
    \"list",
    \"newline",
    \"dashes",
    \"ellipses",
    \"quotes",
    \"inlinecode"
\]

" Allow underlining of certain syntax types
" (superscript/subscript/strikethrough).
let g:pandoc#syntax#style#underline_special = 1

" Enable syntax highlighting for code blocks within Markdown.
let g:pandoc#syntax#codeblocks#embeds#use = 1
" Recognized languages need to be specified explicitly.
let g:pandoc#syntax#codeblocks#embeds#langs = [
    \"bash=sh", "json", "makefile=make", "xml", "yaml",
    \"html", "css", "javascript",
    \"c", "cpp", "java", "scala",
    \"latex=tex", "bibtex=bib",
    \"r", "python", "sql"
\]
