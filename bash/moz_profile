#
# Mozilla-specific bash configuration.
# 
# Source this from local bash dotfiles. It will get sourced from ./bash_profile
# automatically if USE_MOZ_PROFILE is "true".
#


# Our LDAP-protected web server.
# export WWW_SERVER="dashboard1"
# The www dir for hosting files behind LDAP.
export WWW_BASEDIR="/data/www/metrics.mozilla.com/protected/dzeber"

# S3 buckets.
#
# Parquet datasets (Spark DataFrames).
export S3_DT="s3://telemetry-parquet"
# Raw Telemetry data.
export S3_RAWDATA="s3://net-mozaws-prod-us-west-2-pipeline-data"
# Telemetry metadata.
export S3_METADATA="s3://net-mozaws-prod-us-west-2-pipeline-metadata"
# "Home dir" in Metrics bucket.
export S3_HOME="s3://mozilla-metrics/user/dzeber"

# Git repo management.
#
# Some files/dirs should be available to a Git repo but not committed,
# eg. large data files or custom output.
# Instead, these are stored in Google Drive.

# The base dir where git repos are cloned to
export USERPROF_GIT_DIR="$HOME/git"
# The base dir where repo-specific files are stored in Google Drive.
# Subdirs follow the same structure as the corresponding repo dir under
# `$USERPROF_GIT_DIR`, eg. `my-repo/data`.
export USERPROF_REPOFILES_DIR="$HOME/Google Drive/repofiles"

# Return the corresponding repofiles storage dir for the current repo dir.
# This should be run from inside a git repo.
get_repofiles_currdir () {
    local CURR_DIR="$(realpath .)"
    local GIT_BASE="$USERPROF_GIT_DIR/"
    # Only continue if the current dir is in a git repo.
    [[ "${CURR_DIR:0:${#GIT_BASE}}" != "$GIT_BASE" ]] && return 1

    echo "$USERPROF_REPOFILES_DIR/$(realpath --relative-to $USERPROF_GIT_DIR .)"
}

# Create a dir inside the base repofiles storage dir, and symlink it into
# the current dir (expected to be inside the repo).
# Fails if run from outside a git repo.
# Usage: `make_repofiles_dir <mydir>`
make_repofiles_dir () {
    local REPOFILES_BASE_DIR="$(get_repofiles_currdir)"
    # Only continue if the current dir is in a git repo.
    [[ -z "$REPOFILES_BASE_DIR" ]] && return 1

    local REPOFILES_DIR="$REPOFILES_BASE_DIR/$1"
    mkdir -p "$REPOFILES_DIR"
    ln -s "$REPOFILES_DIR"
}


# Copy a file to the web server, and make it visible.
# Usage: publish_www <file> <server_dir>
# <server_dir> is optional, defaults to "tmp".
# publish_www () {
#     if [[ "$#" == 0 ]]; then
#         local MSG="\nUsage: publish_www <local file> <server dir>"
#         MSG="$MSG\n    <local file>: the file to publish to the web server"
#         MSG="$MSG\n    <server dir>: the path on the web server to serve the file from"
#         MSG="$MSG\n                  (relative to the base dir $WWW_BASEDIR/)."
#         MSG="$MSG\n                  Optional; defaults to 'tmp'."
#         echo -e "$MSG" 1>&2
#         return 1
#     fi

#     # The path to the web dir on the web server.
#     # Default to the 'tmp' subdir.
#     local LOCAL_FILENAME="$(basename "$1")"
#     local TARGET_DIR="$WWW_BASEDIR/${2:-tmp}"
#     local TARGET_FILE="$TARGET_DIR/$LOCAL_FILENAME"

#     # Copy the file.
#     scp "$1" "$WWW_SERVER:$TARGET_DIR"
#     # If copying failed, could be because the VPN was not connected.
#     if [[ "$?" != 0 ]]; then
#         echo "Copying failed. Is the VPN connected?" 1>&2
#         return 1
#     fi
#     echo "$LOCAL_FILENAME was copied to $TARGET_DIR"

#     # Check the permissions on the copied file.
#     local STAT_CMD="stat -c \"%a\" $TARGET_FILE"
#     local PERMS_ON_SERVER="$(ssh dashboard1 "$STAT_CMD")"
#     if [[ "$PERMS_ON_SERVER" != "644"  ]]; then
#         ssh dashboard1 "chmod 644 $TARGET_FILE"
#         echo "Permissions updated."
#     fi
# }

