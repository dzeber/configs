#-----------------------------------------------------------------------------
#
# Common bash configuration.
# 
# If additional machine-specific configs are required, such as env variables,
# they can be set inside a local bash dotfile, from which this file can then be
# sourced.
#
# If this script is sourced with the arg '--moz_profile' supplied, the
# ./moz_profile script will be run (note that this may not work if this script
# is sourced via a symlink).
#
# If this script is sourced with the arg '--mozaws' supplied, the
# ./mozaws_profile script will be run (note that this may not work if this
# script is sourced via a symlink).
#
#-----------------------------------------------------------------------------


while [[ $# -gt 0 ]]; do
    case "$1" in
        --moz_profile) USE_MOZ_PROFILE="true" ;;
        --mozaws) USE_MOZAWS="true" ;;
    esac
    shift
done


#-----------------------------------------------------------------------------
#
# Command completion
# ------------------
#

# Enhanced bash completion, as installed using Homebrew.
# Try looking for newer version first.
BASH_COMP="/usr/local/etc/bash_completion"
BASH_COMP_2="/usr/local/share/bash-completion/bash_completion"
BASH_COMP_M1="/opt/homebrew/etc/profile.d/bash_completion.sh"

if [[ -r "$BASH_COMP_M1" ]]; then
    . "$BASH_COMP_M1"
elif [[ -r "$BASH_COMP_2" ]]; then
    . "$BASH_COMP_2"
elif [[ -r "$BASH_COMP" ]]; then
    . "$BASH_COMP"
fi

# Completion for AWS. Should be in PATH.
AWS_COMP="$(command -v aws_completer)"
[[ -n "$AWS_COMP" ]] && complete -C "$AWS_COMP" aws

# Completion for pip, if installed.
# Make sure to cover both Python 2 and Python 3
command -v pip > /dev/null && eval "$(pip completion --bash)"
# command -v pip2 > /dev/null && eval "$(pip2 completion --bash)"
# command -v pip3 > /dev/null && eval "$(pip3 completion --bash)"

# Advanced completion for tmux. Needs to be downloaded first from
# https://github.com/imomaliev/tmux-bash-completion
TMUX_COMP="~/.tmux/tmux-bash-completion/completions/tmux"
if [[ -r "$TMUX_COMP" ]]; then
    . "$TMUX_COMP"
fi

# Completion for Google Cloud SDK (should have been installed with Homebrew)
if [[ -n "$(command -v brew)" ]]; then
    GCLOUD_COMP="$(brew --caskroom)/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc"
    [[ -r "$GCLOUD_COMP" ]] && . "$GCLOUD_COMP"
    unset GCLOUD_COMP
fi

unset BASH_COMP BASH_COMP_2 AWS_COMP TMUX_COMP


#-----------------------------------------------------------------------------
#
# Other customizations
# --------------------
#

# Customization for less.
export LESS="--quit-if-one-screen --long-prompt --no-init --RAW-CONTROL-CHARS"

# Customized command prompt.
#
# If the variable HOST_NICKNAME is set, use it in the prompt.
# Otherwise, use the short form of the hostname.
#
# Also add info for git repos, if functionality is available:
# - branch
# - dirtiness indicator
# - untracked files indicator
GIT_PS1_CMD="$(command -v __git_ps1)"
if [[ -n "$GIT_PS1_CMD" ]]; then
    export GIT_PS1_SHOWUNTRACKEDFILES=true
    export GIT_PS1_SHOWDIRTYSTATE=true
    #export GIT_PS1_SHOWUPSTREAM="auto"
    GIT_PS1_CMD=$(printf '$(%s)' $GIT_PS1_CMD)
fi
export PS1="$(printf '\[\033[1;32m\]%s@%s: \[\033[1;36m\]\W\[\033[0;0m\]%s }\$ ' \
                "\u" \
                "${HOST_NICKNAME:-\h}" \
                "$GIT_PS1_CMD")"

unset GIT_PS1_CMD


#-----------------------------------------------------------------------------
#
# Aliases
# -------
#

# Customized views for (GNU) ls. 
# Always use colours.
alias ls='ls --color=auto'
# Customized short form. 
alias la='ls -A --group-directories-first'
# Customized long form.
alias lsl='ls -lAh'
alias lld='lsl --group-directories-first'

# Tree view
TREE_EXCLUDE='__pycache__|.ipynb_checkpoints|*.pyc|*.git|*.egg*'
alias lst='tree -alAC -I "$TREE_EXCLUDE"'

# Use `trash` instead of `rm` if installed
if [[ -n "$(command -v trash)" ]]; then
    alias rmv=$(command -v rm)
    alias rm=trash
else
    # Otherwise require confirmation
    alias rm='rm -i'
fi

# Replace `cat` with `bat` if installed
if [[ -n "$(command -v bat)" ]]; then
    export HAS_BAT=true
    # Use minimal output styling.
    export BAT_STYLE="numbers,changes"
    alias cat='bat'
fi

# Print path elements on separate lines
alias path='echo $PATH | tr -s ":" "\n" | cat'

# Print shell and environment variables (excluding functions)
alias vars='(set -o posix; set) | cat $([[ -n "$HAS_BAT" ]] && echo "-l sh")'

# Always use Vim (for cases where applications default to opening vi).
alias vi='vim'

# Open with default browser on Mac
if [[ $OSTYPE == 'darwin'* ]]; then
    BROWSER_DEFAULT="$(defaults read \
        ~/Library/Preferences/com.apple.LaunchServices/com.apple.launchservices.secure \
        | awk -F'"' '/http;/{print window[(NR)-1]}{window[NR]=$2}')"
    alias openb='open -b "$BROWSER_DEFAULT"'
fi

# Git commands
alias gst='git status'
alias galias='git config --list |
    grep "alias" |
    sed "s/^alias\.//" |
    sed "s/=/ = /"'

# Rmarkdown rendering.
alias rmd='render_rmd'

# Python tools
# virtualenv for specific Python versions.
alias virtualenv='virtualenv -p python'
alias virtualenv2='virtualenv -p python2'
alias virtualenv3='virtualenv -p python3'
# Install a new IPython kernel.
# Run inside an activated virtual env to use Juypter.
# Usage: `make_kernel <name>`
alias make_kernel='python -m ipykernel install --user --name'
# Setting line length for black
#alias black='black -l 79'

# Make sure Jupyter runs from its dedicated conda env.
# Other conda envs will be available as kernels
# (extension is installed to make this possible).
# If a different conda env is already active, this doesn't change it.
alias jupyter='conda activate jupyter; jupyter'
alias jnb='start_jupyter_server'

# R
#alias R='R --no-save'



#-----------------------------------------------------------------------------
#
# Functions
# ---------
#

# Shortcut for exploring a dir.
# If called on a single file, print contents, otherwise list dir.
ll () {
    if [[ "$#" == 1 && -f "$1" ]]; then
        cat "$1"
    else
        lsl "$@"
    fi
}

# Check out a pull request as a local branch.
# Usage: git_checkout_pr <N> (the PR ID)
# Creates a local branch 'pull_<N>' and switches to it
git_checkout_pr () {
    local REMOTE_REF="pull/$1/head"
    local LOCAL_BRANCH="pull_$1"
    git fetch origin "$REMOTE_REF:$LOCAL_BRANCH"
    git checkout "$LOCAL_BRANCH"
}

# print_vars () {
#     local VAR
#     for VAR in "$(vars)"; do
#         echo "$VAR"
#         echo ""
#         # tput setaf 14 && echo -n "$(echo "$VAR" | sed 's/\(^[^=]*\).*/\1/')"
#         # tput setaf 11 && echo -n "="
#         # tput sgr0 && echo "$VAR" | sed 's/^[^=]*=//'
#     done
# }

# Render an Rmarkdown file to HTML.
render_rmd () {
    Rscript --vanilla -e "rmarkdown::render('$1')"
}

# Start a Jupyter server at a specific port.
# If not specified, try to detect from the current tmux window name
# (assumes the name is of the form 'jupyter:<port>').
start_jupyter_server () {
    local port="$1"
    local win_name
    if [[ -z "$port" && -n "$TMUX" ]]; then
        # No port specified and we are in an attached tmux session.
        # Try to parse port number from the current tmux window name.
        win_name="$(tmux display-message -p '#W' | grep 'jupyter:[0-9]\+')"
        if [[ -n "$win_name" ]]; then
            # Window name is of the form 'jupyter:<port>'.
            port="$(echo "$win_name" | sed 's/jupyter://')"
        fi
    fi
    if [[ -z "$port" ]]; then
        # If the port could not be detected automatically, nothing else to do.
        echo "No port specified for Jupyter server"
        return 1
    fi

    jupyter lab --no-browser --port "$port"
}

# Run Python tool to display BibTeX entries.
bib_unique_vals () {
    local THIS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    local SCRIPT_FILE="$THIS_DIR/../tools/bib_unique_vals.py"
    local SCRIPT_CONDA_ENV="bibtex"

    if [[ ! -r "$SCRIPT_FILE" ]]; then
        echo "Could not find Python script"
        return 1
    fi
    local CURRENT_CONDA_ENV="$CONDA_DEFAULT_ENV"
    conda activate "$SCRIPT_CONDA_ENV"
    python "$SCRIPT_FILE" "$@"
    if [[ -n "$CURRENT_CONDA_ENV" ]]; then
        # Return to original conda env
        conda activate "$CURRENT_CONDA_ENV"
    else
        # Conda wasn't active.
        # Call `deactivate` twice (first reverts to base env).
        conda deactivate
        conda deactivate
    fi
}



#-----------------------------------------------------------------------------
#
# Source additional config scripts if required.
# ---------------------------------------------
#

THIS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[[ "$USE_MOZ_PROFILE" == "true" ]] && . "$THIS_DIR/moz_profile"
[[ "$USE_MOZAWS" == "true" ]] && . "$THIS_DIR/mozaws_profile"

unset THIS_DIR
[[ -n "$USE_MOZAWS" ]]  && unset USE_MOZAWS
[[ -n "$USE_MOZ_PROFILE" ]]  && unset USE_MOZ_PROFILE
